USE univDB;
create database univDB;
use univDB;
show tables;

select * from 학생;

select * from 수강2;
desc table 수강2;
-- 학생 테이블 생성
CREATE TABLE 학생
( 학번 char(4) not null
, 이름 varchar(20) not null
, 주소 varchar(50) null DEFAULT '미정'
, 학년 int not null
, 나이 int null
, 성별 char(1) not null
, 휴대폰번호 char(14) null
, 소속학과 varchar(20) null
, primary key (학번) );




-- 과목 테이블 생성
create table 과목
( 과목번호 char(4) not null primary key
, 이름 varchar(20) not null
, 강의실 char(3) not null
, 개설학과 varchar(20) not null
, 시수  int not null ); 


-- 수강테이블 생성
CREATE table 수강
( 학번 char(6) not null
, 과목번호 char(4) not null
, 신청날짜 date not null
, 중간성적 int null default 0
, 기말성적 int null default 0
, 평가학점 char(1) null
, primary key (학번, 과목번호) );

-- 수강테이블 생성
CREATE table 수강2
( 학번 char(6) not null
, 과목번호 char(4) not null
, 신청날짜 date not null
, 중간성적 int null default 0
, 기말성적 int null default 0
, 평가학점 char(1) null
, primary key (학번, 과목번호) );


-- 과목 테이블 생성
create table 과목2
( 과목번호 char(4) not null primary key
, 이름 varchar(20) not null
, 강의실 char(3) not null
, 개설학과 varchar(20) not null
, 시수  int not null ); 

drop table 수강2;

CREATE table 수강2
( 학번 char(6) not null
, 과목번호 char(4) not null
, 신청날짜 date not null
, 중간성적 int null default 0
, 기말성적 int null default 0
, 평가학점 char(1) null
, primary key (학번, 과목번호).
,FOREIGN key(학번) REFERENCES 학생2(학번).
,FOREIGN key(과목번호) REFERENCES 과목2(과목번호));


-- 학생 테이블 입력
insert into 학생 values ('s001', '김연아', '서울 서초', 4, 23, '여', '010-1111-2222', '컴퓨터');
insert into 학생 values ('s002', '홍길동', default, 1, 26, '남', null, '통계');
insert into 학생 values ('s003', '이승엽', null, 3, 30, '남', null, '정보통신');
insert into 학생 values ('s004', '이영애', '경기 분당', 2, null, '여', '010-4444-5555', '정보통신');
insert into 학생 values ('s005', '송윤아', '경기 분당', 4, 23, '여', '010-6666-7777', '컴퓨터');
insert into 학생 values ('s006', '홍길동', '서울 종로', 2, 26, '남', '010-8888-9999', '컴퓨터');
insert into 학생 values ('s007', '이은진', '경기 과천', 1, 23, '여', '010-2222-3333', '컴퓨터');

-- 과목 테이블 입력
insert into 과목 values ('c001', '데이터베이스', '126', '컴퓨터', 3);
insert into 과목 values ('c002', '정보보호', '137', '정보토신', 3);
insert into 과목 values ('c003', '모바일웹', '128', '컴퓨터', 3);
insert into 과목 values ('c004', '철학개론', '117', '철학', 2);
insert into 과목 values ('c005', '정보글쓰기', '120', '교양학부', 1);

-- 수강 테이블 입력
insert into 수강 values ('s001', 'c002', '2019-09-03', 93, 98, 'A');
insert into 수강 values ('s004', 'c005', '2019-03-03', 72, 78, 'C');
insert into 수강 values ('s003', 'c002', '2019-09-06', 85, 82, 'B');
insert into 수강 values ('s002', 'c001', '2019-03-10', 31, 50, 'F');
insert into 수강 values ('s001', 'c004', '2019-03-05', 82, 89, 'B');
insert into 수강 values ('s004', 'c003', '2019-09-03', 91, 94, 'A');
insert into 수강 values ('s001', 'c005', '2019-09-03', 94, 79, 'C');
insert into 수강 values ('s003', 'c001', '2019-03-03', 81, 92, 'B');
insert into 수강 values ('s004', 'c002', '2019-03-05', 92, 95, 'A');

use univDB;

-- 전체 학생의 이름과 주소를 검색하시오.
SELECT 이름, 주소

  FROM 학생;
  
  desc 학생;
  
use univDB;

-- 전체 학생의 이름과 주소를 검색하시오.
SELECT 이름, 주소
  FROM 학생;

-- 전체 학생의 모든 정보를 검색하시오.  
SELECT 학번, 이름, 주소, 학년, 나이, 성별, 휴대폰번호, 소속학과
  FROM 학생;  
  
-- 전체 학생의 소속학과 정보를 주복없이 검색하시오. 
SELECT DISTINCT 소속학과
  FROM 학생;    
  
-- 학생 중에서 2학년 이상인 컵퓨터학과 학생의 이름, 학년, 소속학과, 휴대폰번호 정보를 검색하시오.
SELECT 이름, 학년, 소속학과, 휴대폰번호
  FROM 학생
 WHERE 학년 >=2 AND 소속학과='컴퓨터';    
  
/* 1,2,3학년 학생이거나 '컴퓨터'학과에 소속되지 않으며
 학생의 이름, 학년, 소속학과, 휴대폰번호 정보를 검색하시오.*/
SELECT 이름, 학년, 소속학과, 휴대폰번호
  FROM 학생
 WHERE (학년 >=1 AND 학년 <=3) OR NOT (소속학과='컴퓨터');    
 
 SELECT 이름, 학년, 소속학과, 휴대폰번호
   FROM 학생
  WHERE (학년 BETWEEN 1 AND 3) OR NOT (소속학과='컴퓨터');    
 
/* OREDR BY
컴퓨터학과이거나 정보통신학과의 학생의 이름과 학년, 소속학과 정보를 
학년의 오름차순(학년이 낮은 학생부터 높은 학생 순서)으로 검색하시오.
*/
SELECT 이름, 학년, 소속학과 
-- , 휴대폰번호
  FROM 학생
 WHERE 소속학과='컴퓨터' OR 소속학과 = '정보통신'
 ORDER BY 학년 ASC
 ;    
 
 /*
 전체 학새의 모든 정보를 거색하되 학년을 기준으로 먼저 1차 오름차순 정렬하고,
 학년이 같은 경우에는 이름을 기준으로 2차 내림차순 정렬하여 검색하시오.
 */
 SELECT *
   FROM 학생
  ORDER BY 학년 ASC, 이름 DESC;
  
  /*
 전체 학새의 모든 정보를 거색하되 학년을 기준으로 먼저 1차 오름차순 정렬하고,
 학년이 같은 경우에는 이름을 기준으로 2차 내림차순 정렬하여 검색하시오.
 */
 SELECT *
   FROM 학생
  ORDER BY 학년 ASC, 이름 DESC;
  
 /*
 집계함수 COUNT( ), MAX( ), MIN( ), SUM( ), AVG( )
 */
 -- 전체학생수를 검색하시오.
 SELECT COUNT(*)
   FROM 학생;
 SELECT COUNT(학번)
   FROM 학생;
 SELECT COUNT(*) AS 학생수1, COUNT(주소) AS 학생수2, COUNT(distinct 주소) AS 학생수3
   FROM 학생;

-- 여학생의 평균 나이를 검색하시오.   
 SELECT COUNT(*)
   FROM 학생
  WHERE 성별='여';
   
 /*
 GROUP BY
 */
 -- 전체 학생의 성별 최고 나이와 최저 나이를 검색하시오.
 SELECT 성별, MAX(나이) AS '최고나이', MIN(나이) AS '최저 나이'
   FROM 학생
  GROUP BY 성별;
   
 SELECT 나이, COUNT(*) AS '나이별 학생수'
   FROM 학생
  WHERE 나이>=20 AND 나이 <30
  GROUP BY 나이;
  
  
  
  /*
  HAVING절은 그룹이 만족해야 하는 제한 조건을 명세
  */
 SELECT 학년, COUNT(*) AS '학년별 학생수'
   FROM 학생
  GROUP BY 학년
 HAVING COUNT(*) >= 2
  ;
  
 -- 이씨 성을 가진 학생들의 학번과 학생 이름을 검색하시오.
 SELECT 학번, 이름
   FROM 학생
  WHERE 이름 LIKE '이__';
 
 -- 주소지가 '서울'인 학생의 이름, 주소, 학년을 학년 순(내림차순)으로 검색하시오.
 SELECT 이름, 주소, 학년
   FROM 학생
  WHERE 주소 LIKE '%서울%'
  ORDER BY 학년 DESC;
  
 -- 휴대폰번호가 등록되지 않은(널 값을 갖는) 학생의 이름과 휴대폰번호를 검색하시오.
 SELECT 이름, 휴대폰번호
   FROM 학생
  WHERE 휴대폰번호 IS NULL;  
  
-- 학생테이블에 여학생이거나 수강테이블에 A학점을 받은 학생의 학번을 검색하시오.
 SELECT 학번
   FROM 학생
  WHERE 성별 = '여'
 UNION
 SELECT 학번
   FROM 수강
  WHERE 평가학점 = 'A';  
  
/* 부 질의문(subquery) */
-- IN연산자 : 과목번호가 'C002'인 과목을 수강한 학생의 이름을 검색하시오.
SELECT 이름
  FROM 학생
 WHERE 학번 IN ('s001','s003','s004');
 
 SELECT 이름
  FROM 학생
 WHERE 학번 IN ( SELECT 학번 
				  FROM 수강
				 WHERE 과목번호 = 'c002'
 				);
 
 --  중첩 부 질의문
 -- '정보보호'과목을 수강한 학생의 이름을 검색하시오.
SELECT 이름
  FROM 학생
 WHERE 학번 IN ( SELECT 학번 
				  FROM 수강
				 WHERE 과목번호 = (SELECT 과목번호
                                  FROM 과목
								 WHERE 이름 = '정보보호')
 				);
 
 -- EXISTS 연산사
 -- 과목번호가 'c002'인 과목을 수강한 학생이 이름을 검색하시오. 
 -- 대소문자 구분 안함, 부 질의문에 테이블 생략가능한 경우 확인
 SELECT 이름
   FROM 학생
 WHERE EXISTS ( SELECT * 
				  FROM 수강
				 WHERE 수강.학번 = 학생.학번
                   AND 수강.과목번호 = 'c002'
 				);
  
/*
조인 검색은 둘 이상의 테이블로부터 
연관된 행들의 결합을 통해서 검색 결과를 생성

‘조인_조건식’ 없이 이루어진 조인
관계 대수의 카티션 프로덕트 연산을 적용한 결과(두 테이블을 곱한 결과)를 반환
대부분의 행이 의미 없는 기계적인 결합임
*/
-- 크로스 조인(CROSS JOIN)
SELECT *
  FROM 학생, 수강;

SELECT *
  FROM 학생 CROSS JOIN 수강;
  
-- 동등 조인  
-- 전체 학생의 기본 정보와 모든 수강 정보를 검색하시오. 
-- (1=1 는 무조건 TRUE로 의미없음, 생략가능 : 뒤에 AND 제거필요)
SELECT *
  FROM 학생, 수강
 WHERE 1=1
   AND 학생.학번 = 수강.학번;
   
SELECT *
  FROM 학생 JOIN 수강 ON 학생.학번 = 수강.학번   ;
  

/*
학생 중에서 과목번호가 'c002'인 과목을 수강한 학생의
학번과 이름, 과목번호 그리고 변환중간성적(학생별 중간 성적의 10%가산점수)을 검색하시오.
*/
SELECT 학생.학번, 이름, 과목번호, 중간성적+(중간성적*0.1) AS 변환중간성적
  FROM 학생, 수강
 WHERE 학생.학번=수강.학번 AND 과목번호='c002';
 
SELECT 학생.학번, 이름, 과목번호, 중간성적+(중간성적*0.1) AS 변환중간성적
  FROM 학생 JOIN 수강 ON 학생.학번=수강.학번
 WHERE 과목번호='c002'; 
 
-- 학생 중에서 '정보보호' 과목을 수강한 학생이 학번과 이름, 과목번호를 검색하시오.
SELECT 학생.학번, 학생.이름, 수강.과목번호
  FROM 학생, 수강, 과목
 WHERE 학생.학번=수강.학번
   AND 수강.과목번호=과목.과목번호
   AND 과목.이름='정보보호'; 

SELECT 학생.학번, 학생.이름, 수강.과목번호   
  FROM (학생 JOIN 수강 ON 학생.학번=수강.학번) JOIN 과목 ON 수강.과목번호 = 과목.과목번호
 WHERE 과목.이름='정보보호';    
 
-- 테이블 별칭 사용
-- 학생 중에서 과목번호가 'c002'인 과목을 수강한 학생의 이름, 과목번호를 검색하시오.
SELECT 이름, 과목번호
  FROM 학생 AS S, 수강 E
 WHERE S.학번=E.학번
   AND 과목번호='c002';

-- 셀프 조인(self join)
-- 주소가 같은 학생들의 이름을 쌍으로 검색하시오.
-- 이때, 검색되는 첫 번째 학생이 두번째 학생보다 학년이 높도록 하시오.
SELECT S1.이름, S2.이름
  FROM 학생 S1 JOIN 학생 S2 ON S1.주소=S2.주소
 WHERE S1.학년>S2.학년;  
 
 -- 외부 조인(outer join)
 -- 과목을 수강하지 않은 학생을 포함하여 모든 학생의 학번,
 -- 이름과 학생이 수강한 교과의 평가학저믈 검색하시오.
 SELECT 학생.학번, 이름, 평가학점
   FROM 학생 LEFT OUTER JOIN 수강 ON 학생.학번=수강.학번;
   
 -- 행삽입 INSERT문
 /* 학생1 테이블에 학번 'g001', 이름 '김연아2', 주소 '서울 서초', 학년 4, 나이 23, 성별 '여',
 휴대폰번호 '010-1111-2222', 소속학과 '컴퓨터'인 학생 정보를 삽입하시오.	*/ 
 -- 우선 학생1 테이블 생성하시고.
 CREATE TABLE 학생1
( 학번 char(4) not null
, 이름 varchar(20) not null
, 주소 varchar(50) null DEFAULT '미정'
, 학년 int not null
, 나이 int null
, 성별 char(1) not null
, 휴대폰번호 char(14) null
, 소속학과 varchar(20) null
, primary key (학번) );

-- 데이터를 학생1 테이블에 삽입하세요.
-- 컬럼 순서가 맞으면 컬럼은 생략할 수 있다.
desc 학생1; -- 컬럼순서 확인
INSERT INTO 학생1
VALUES ('g001','김연아2', '서울 서초', 4, 23, '여', '010-1111-2222','컴퓨터');

INSERT INTO 학생1 (학번, 이름, 주소, 학년, 나이, 성별, 휴대폰번호, 소속학과) 
VALUES ('g002','김연아3', '서울 서초', 4, 23, '여', '010-1111-2222','컴퓨터');

-- 기본 값 혹은 널 값 입력
/* 학번 'g002', 이름 '홍길동2', 주소 '미정', 학년 1, 나이 26, 성별 '남', 휴대폰번호 'NULL',
소속학과 '통계'인 핚생 정보를 삽입하시오.	*/   
INSERT INTO 학생1(이름, 주소, 학년, 나이, 성별, 휴대폰번호, 소속학과, 학번)
VALUES ('홍길동2', DEFAULT, 1, 26, '남', NULL, '통계', 'g002');   

-- 학번은 PK는 중복 등록될 수 없으니, 먼저 등록된 값을 삭제함.
DELETE FROM 학생1
 WHERE 학번='g002';

INSERT INTO 학생1(이름, 학년, 나이, 성별, 소속학과, 학번)
VALUES ('홍길동2', 1, 26, '남', '통계', 'g002');  

-- 학번 'g003', 이름 '이승엽2', 주소 '미정', 학년 3, 나이 30, 성별 '남', 휴대폰번호 'NULL', 소속학과 '정보통신'인 학생 정보를 삽입하시오.
-- 주소 값을 넣지 않으면 기본값으로 '미정'이 등록됨, 휴대폰번호 NULL을 허용함.
INSERT INTO 학생1(학번, 이름, 학년, 나이, 성별, 소속학과)
VALUES ('g003','이승엽2',3,30,'남','정보통신');  
 
-- 행 수정 UPDATE문
-- '이은진' 학생의 학년을 '3'학년으로 수정하시오.
-- 먼저 이은진 학생의 데이터를 넣자.
INSERT INTO 학생1(학번, 이름, 학년, 나이, 성별, 소속학과)
VALUES ('g004','이은진',1,21,'여','정보통신');  

UPDATE 학생1
   SET 학년=3
 WHERE 이름='이은진';
-- 위명령어는 SAFE UPDATE MODE해제 필요, KEY값을 조건절로 하지 않으면 수정/삭제를 제한하는 모드
-- Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column.  To disable safe mode, toggle the option in Preferences -> SQL Editor and reconnect.	0.000 sec
-- 아래 명령어를 실행 후 위 UPDATE문 실행하세요.
SET SQL_SAFE_UPDATES=0; 
SELECT * FROM 학생1 WHERE 이름='이은진';

-- 모든 학생의 학년을 1씩 증가시키고 소속학과를 '자유전공학부'로 변경하시오.
SELECT * FROM 학생1;

UPDATE 학생1
   SET 학년=학년+1, 소속학과='자유전공학부'
 WHERE 학년=4;
 
SELECT * FROM 학생1;


-- 부 질의문을 이용한 수정
-- 수강 내용이 없는 학생의 소속학과를 널 값으로 수정하시오.
SELECT * FROM 학생1;

UPDATE 학생1
   SET 소속학과=NULL
 WHERE 학번 NOT IN (SELECT 학번
                     FROM 수강);
 
SELECT * FROM 학생1;

-- 학번이 's003'인 학생의 수강 내용을 '이은진' 학생이 수강한 것으로 수정하시오.
-- (즉, 수강1 테이블의 학번을 's003' 대신에 '이은진' 학생의 학번으로 변경하시오)
SELECT * 
  FROM 학생, 수강
 WHERE 학생.학번=수강.학번
   AND 학생.학번 ='s003';

UPDATE 수강
   SET 학번 = (SELECT 학번
                FROM 학생
			   WHERE 이름='이은진')
 WHERE 학번='s003';
 
SELECT * 
  FROM 학생, 수강
 WHERE 학생.학번=수강.학번
   AND 학생.학번='s003' OR 학생.학번='s007';
  
  
-- 행 삭제 DELETE문
-- 학생1 테이블에 '송윤아'학생의 모든 정보를 삭제하시오.
-- 우선, 아래 INSERT문으로 데이터를 등록하시고
insert into 학생1 values ('s005', '송윤아', '경기 분당', 1, 20, '여', '010-6666-7777', '컴퓨터');
insert into 학생1 values ('s010', '송윤아', '경기 분당', 2, 21, '여', '010-6666-7778', '컴퓨터');
insert into 학생1 values ('s011', '송윤아', '경기 분당', 3, 22, '여', '010-6666-7779', '컴퓨터');
SELECT * FROM 학생1 WHERE 이름='송윤아';   -- 데이터가 들어있는지 확인

DELETE FROM 학생1
  WHERE 이름='송윤아';


-- 3학년 모든 학생 정보를 삭제하시오.
SELECT * FROM 학생1;
DELETE FROM 학생1
 WHERE 학년=3;
 
-- 부 질의문을 이용한 삭제
-- 수강자가 2명 미만인 과목에 대한 과목 정보를 모두 삭제하시오.
-- 과목1 테이블 생성
-- 과목 테이블 생성
create table 과목1
( 과목번호 char(4) not null primary key
, 이름 varchar(20) not null
, 강의실 char(3) not null
, 개설학과 varchar(20) not null
, 시수  int not null ); 

-- 과목 테이블 입력
insert into 과목1 values ('c001', '데이터베이스', '126', '컴퓨터', 3);
insert into 과목1 values ('c002', '정보보호', '137', '정보토신', 3);
insert into 과목1 values ('c003', '모바일웹', '128', '컴퓨터', 3);
insert into 과목1 values ('c004', '철학개론', '117', '철학', 2);
insert into 과목1 values ('c005', '정보글쓰기', '120', '교양학부', 1);

SELECT * FROM 과목1; -- 과목1 테이블에 데이터가 존재하는지 확인
SELECT 과목번호
          FROM 수강
		 GROUP BY 과목번호
		HAVING COUNT(*) < 2; -- 수강자가 2명 미만인 과목번호 확인

-- 수강자가 2명 미만인 과목번호 삭제        
DELETE FROM 과목1 
 WHERE 과목번호 IN
       (SELECT 과목번호
          FROM 수강
		 GROUP BY 과목번호
		HAVING COUNT(*) < 2);
        
SELECT * FROM 과목1;  -- 과목수 확인     


-- 학생1 테이블의 모든행 삭제
SELECT * FROM 학생1; -- 데이터가 있는지 확인
DELETE FROM 학생1; -- 모든 데이터 삭제
SELECT * FROM 학생1; -- 데이터가 삭제되었는지 확인
-- 전체 학생의 모든 정보를 검색하시오.  
SELECT 학번, 이름 주소, 학년, 나이, 성별, 휴대폰번호, 소속학과
  FROM 학생;  
  
-- 전체 학생의 소속학과 정보를 주복없이 검색하시오. 
SELECT DISTINCT 소속학과
  FROM 학생;    
  
-- 학생 중에서 2학년 이상인 컵퓨터학과 학생의 이름, 학년, 소속학과, 휴대폰번호 정보를 검색하시오.
SELECT 이름, 학년, 소속학과, 휴대폰번호
  FROM 학생
 WHERE 학년 >=2 AND 소속학과='컴퓨터';    
  
/* 1,2,3학년 학생이거나 '컴퓨터'학과에 소속되지 않으며
 학생의 이름, 학년, 소속학과, 휴대폰번호 정보를 검색하시오.*/
SELECT 이름, 학년, 소속학과, 휴대폰번호
  FROM 학생
 WHERE (학년 >=1 AND 학년 <=3) OR NOT (소속학과='컴퓨터');    
 
 SELECT 이름, 학년, 소속학과, 휴대폰번호
   FROM 학생
  WHERE (학년 BETWEEN 1 AND 3) OR NOT (소속학과='컴퓨터');    
 
/* OREDR BY
컴퓨터하고가나 정보통신학과의 학생의 이름과 학년, 소속학과 정보를 
학년의 오름차순(학년이 낮은 학생부터 높은 학생 순서)으로 검색하시오.
*/
SELECT 이름, 학년, 소속학과 
-- , 휴대폰번호
  FROM 학생
 WHERE 소속학과='컴퓨터' OR 소속학과 = '정보통신'
 ORDER BY 학년 ASC
 ;    
 
 /*
 전체 학새의 모든 정보를 거색하되 학년을 기준으로 먼저 1차 오름차순 정렬하고,
 학년이 같은 경우에는 이름을 기준으로 2차 내림차순 정렬하여 검색하시오.
 */
 SELECT *
   FROM 학생
  ORDER BY 학년 ASC, 이름 DESC;
  
  /*
 
